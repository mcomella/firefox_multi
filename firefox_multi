#!/usr/bin/env python

"""
This script will search the current users ~/.mozilla/firefox/profiles.ini for
profiles with "sync" in the name (case sensitive) and attempt to open one that
is not currently open on the current screen. If a profile is already open on
the current screen, a new window from that profile will open instead. Due to
this last quirk, it is recommended to have at least one more profile available
than the user expects to have open at any time.

If no profiles are available, this script will also attempt to recover crashed
profiles by looking at the $PROFILE_DIR/lock symlink and the address it points
to. If the firefox process is not running at the designated address, the lock
file is removed, and the profile is recovered. If the address is remote, the
remote machine will use SSH to accomplish this. The script will run in SSH mode
if the first command line argument is "via_ssh". This should NOT be specified
by the user.

Any arguments (discluding SSH mode) will be passed to the spawned firefox
instance through the typical firefox start script.

"""
from os import execl, readlink
import ConfigParser
import pickle
import re
import socket
import os.path, subprocess, sys

PROGRAM_PATH = os.path.abspath(sys.argv[0])
SHELL_PATH = '/bin/bash'
FIREFOX_BASENAME = 'firefox'
FIREFOX_PATH = '/contrib/bin/' + FIREFOX_BASENAME
PROFILE_DIR = os.path.expanduser('~') + '/.mozilla/firefox/'
PROFILE_INI = PROFILE_DIR + 'profiles.ini'

# Options for firefox process checks on remote hosts.
SSH_CONNECT_TIMEOUT = 2 # In seconds.
SSH_OPT = 'ConnectTimeout=' + str(SSH_CONNECT_TIMEOUT)

# The lock is a symlink pointing to the active machine ip & pid.
# Ex: 10.116.72.90:+30681
LOCK_SYMLINK_REGEX = '([0-9.]+):\+([0-9]+$)'

# Strings returned from the script in SSH mode to determine process status.
SSH_FF_RUNNING = 'firefox via_ssh: running'
SSH_FF_STOPPED = 'firefox via_ssh: stopped'

# TODO: Getting the IP this way may be fragile as per the official python docs.
LOCAL_IP = socket.gethostbyname(socket.gethostname())

def main():
    if len(sys.argv) > 1 and sys.argv[1] == 'via_ssh': ssh_main()
    else: local_main()

def ssh_main():
    """Running remotely: Prints state info to stdout about the given profile.

    The profile information is expected via stdin as a serialized string of the
    form {'name', 'abs_path', 'ip', 'pid'}.

    The printed state info is specifically whether the given profile appears to
    be running or not.

    """
    try:
        prof = pickle.loads(sys.stdin.read())
    except (pickle.UnpicklingError, IndexError) as e:
        print 'Error: ' + str(e)
        # Assume running so the lock file is not deleted.
        print SSH_FF_RUNNING
    else:
        if firefox_is_running(prof, via_ssh=True): print SSH_FF_RUNNING
        else: print SSH_FF_STOPPED

def local_main():
    """Running locally: Find and launch an inactive profile."""
    synced_profiles = find_synced_profiles(PROFILE_INI)
    inactive_profiles = find_inactive_profiles(synced_profiles)
    if len(inactive_profiles) == 0:
        sys.exit('All profiles are currently active or unrecoverable. Please '
                'close a profile, manually recover a crashed profile, or '
                'create a new profile with "sync" in the name to open a new '
                'session.')

    # Spawns firefox in a new shell process since libxpcom.so will be looked
    # for in the incorrect directory (/usr/bin/libxpcom.so) with an exec call.
    first_inactive_profile = inactive_profiles[0]['name']
    firefox_cmd = FIREFOX_PATH + ' -P ' + first_inactive_profile
    for arg in sys.argv[1:]: firefox_cmd = firefox_cmd + ' \'' + arg + '\''
    print 'bash -c "' + firefox_cmd + '"'
    execl(SHELL_PATH, 'bash', '-c', firefox_cmd)

def find_synced_profiles(filepath):
    """Finds synced profiles and returns them as an array of dicts.

    Profiles are considered synced if they have the string "sync" in their
    name.

    The returned dicts are of the format {'name', 'abs_path'}.

    """
    config = ConfigParser.RawConfigParser()
    config.read(filepath)

    # Iterate over profiles. If filepath DNE, config.sections will have a len
    # of zero, and the empty array will be returned.
    synced_profiles = []
    for section in config.sections():
        if 'Profile' in section:
            name = config.get(section, 'Name')
            if 'sync' in name:
                path = config.get(section, 'Path')
                path_is_relative = config.getboolean(section, 'IsRelative')
                if path_is_relative: path = PROFILE_DIR + path
                synced_profiles.append({'name': name, 'abs_path': path})
    return synced_profiles

def find_inactive_profiles(synced_profiles):
    """Finds profiles which are not being used and returns them in an array.

    synced_profiles and the returned value are arrays of {'name', 'abs_path'}
    dicts.

    """
    inactive_profiles = [] # [ {'name', 'abs_path'} ]
    active_profiles = [] # [ {'name', 'abs_path', 'ip', 'pid'} ]
    for prof in synced_profiles:
        prof_ip, prof_pid = get_lock_proc_info(prof)
        if prof_ip is None: # When there is no ip (i.e. an inactive profile).
            inactive_profiles.append(prof)
        else:
            prof['ip'], prof['pid'] = prof_ip, prof_pid
            active_profiles.append(prof)

    if len(inactive_profiles) == 0:
        print 'Attempting to recover crashed profiles...'
        for prof in active_profiles:
            prof_is_unlocked = attempt_to_recover_profile(prof)
            if prof_is_unlocked:
                inactive_profiles.append(prof)
                break # Only recover one for time constraints.
    return inactive_profiles

def get_lock_proc_info(prof):
    """Returns a tuple with the active profile's process info.

    prof is a profile: {'abs_path'}.

    The returned tuple contains the machine's ip and Firefox's pid as
    (prof_ip, prof_pid). Returns (None, None) if the lock DNE or the lock's
    symlink format is not recognized. Additionally prints an error message and
    exits in the latter case as this should not happen under normal usage.

    """
    try:
        info_str = os.readlink(prof['abs_path'] + '/lock')
    except OSError:
        # Thrown on os.readlink() if the given path is not a link (i.e. DNE).
        return (None, None)
    else:
        m = re.match(LOCK_SYMLINK_REGEX, info_str)
        if m is None:
            sys.exit('get_lock_prof_info(): The link on profile "' +
                    prof['name'] + '" does not have a recognizable format. '
                    'This could be a problem with the script regex, or the '
                    'lock file may have been manipulated incorrectly. Please '
                    'manually review these items. Exiting...')
        return (m.group(1), m.group(2)) # ip, pid

def attempt_to_recover_profile(prof):
    """Attempts to recover a Firefox profile in process is inactive.

    prof is a supposedly active profile: {'name', 'abs_path', 'ip', 'pid'}.

    Profile recovery is attempted by checking if a Firefox process exists at
    the specified machine and pid, and if not, deletes the lock file and
    returns True.  Returns False otherwise.

    """
    if firefox_is_running(prof): return False
    remove_lock(prof)
    return True

def firefox_is_running(prof, via_ssh=False):
    """Returns True if the Firefox process in the given profile is active.

    Returns False otherwise. prof is a profile: {'name', 'abs_path', 'ip',
    'pid'} and via_ssh is a boolean True if this function is called from SSH
    mode, False otherwise.

    If the process is located on another machine, this function will SSH into
    it to return the appropriate result. If there is an error, the function
    assumes the profile is running and returns True (as this will have no side
    effect).

    """
    if prof['ip'] == LOCAL_IP: # Firefox is running on localhost.
        try:
            with open('/proc/' + prof['pid'] + '/cmdline', 'r') as f:
                cmdline = f.read()
                if FIREFOX_BASENAME in cmdline: return True # Still active.
        except IOError: # File DNE: process is dead.
            pass
        return False

    else: # Firefox is running on a remote host.
        if via_ssh:
            sys.stderr.write('firefox_is_running(): SSH has accessed the wrong '
                    'machine (expected: ' + prof['ip'] + '; actual: ' +
                    LOCAL_IP + '). This should not happen.')
            # Firefox may not be running, but we're not on the correct machine
            # so we can't tell the difference. Assume that it's running so the
            # lock file is not deleted.
            return True

        # SSH into the remote host.
        proc = subprocess.Popen(['/usr/bin/ssh', '-o', SSH_OPT, prof['ip'],
                PROGRAM_PATH, 'via_ssh'], bufsize=-1, stdout=subprocess.PIPE,
                stdin=subprocess.PIPE)
        # proc.communicate(...) blocks until process ends.
        stdout, stderr = proc.communicate(pickle.dumps(prof))
        # Remote stderr prints to local stderr by default.
        if stdout is not None and SSH_FF_STOPPED in stdout: return False
        return True

def remove_lock(prof):
    """Removes the lock from the profile, prof: {'abs_path'}."""
    prof_lock_path = prof['abs_path'] + '/lock'
    try:
        os.unlink(prof_lock_path)
    except OSError: # File DNE.
        # The lock is already gone so the profile is (presumably) safe to use.
        pass
    else:
        print 'Unlinked ' + prof_lock_path + '.'

if __name__ == '__main__':
    main()
